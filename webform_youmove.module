<?php

if (!defined('__DIR__')) {define('__DIR__', dirname(__FILE__));}
require_once __DIR__ . '/webform_youmove.admin.inc';

/**
 * Customize the campaign webform (new mode and edition/submission mode):
 * - (new mode and submission mode) If user already logged in hide webform fieldset related to the user
 * - (new mode) Set 'Language' field default value based on global variable
 * - (new mode) If user not logged in disable 'ready to publish' field
 * - (edition/submission mode) Set 'Cancel' button
 * - (edition/submission mode) Disable special fields according to the module settings
 *   depending on the webform field value: 'ready to publish' field
 * - (edition/submission mode) Remove message 'Submission updated' from set of status messages
 */
function webform_youmove_form_alter(&$form, &$form_state, $form_id) {
  $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);

  // If not the campaign webform: stop
  if ($form_id !== 'webform_client_form_'.$ymw_ID) return;


  $settings = variable_get('webform_youmove__ymw_settings');

  // NEW and EDITION/SUBMISSION MODE

  // If user already logged in
  // - hide webform fieldset related to the user
  if (user_is_logged_in()) {
    $fieldset_id = $settings['user_data_fieldset_ID'];
    _set_webform_component($fieldset_id, $form, '#access', FALSE);

    $fields_hidden = $settings['hidden_fields__user_logged'];
  } else {
    // If user not logged in
    // - set form validation for new webform user
    $form['#validate'][] = '_ymw_user_data_validate';

    $fields_hidden = $settings['hidden_fields__user_not_logged'];
  }

  // Hide webform field according to module settings
  $fields_hidden_arr = explode(',',$fields_hidden);
  foreach ($fields_hidden_arr as $field) {
    _set_webform_component($field, $form, '#access', FALSE);
  }

  // EDITION/SUBMISSION MODE
  if ($form['#submission']) {

    // Set Cancel button
    $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
    '#weight' => 20,
    '#executes_submit_callback' => TRUE,
    '#submit' => array('_webform_youmove_form_cancel'),
    );

    $submission_data = drupout_params($form['#node'],$form['#submission']);

    // Get disabled fields
    // depending on the 'ready to publish' value
    $fields_disabled = (_webform_youmove_ready_to_publish($submission_data)) ?
    variable_get('webform_youmove__ymw_settings')['disabled_fields__published'] : variable_get('webform_youmove__ymw_settings')['disabled_fields'];
    $fields_disabled_arr = explode(',',$fields_disabled);

    // Disabled fields
    foreach ($fields_disabled_arr as $field) {
      _set_webform_component($field,$form,'#attributes',array('disabled' => '1'));
    }

    // Disable the 'ready to publish' field if already set to positive value
    if(_webform_youmove_ready_to_publish($submission_data)) {
      _set_webform_component('ready_to_publish', $form, '#disabled',TRUE);
    }

    // Remove message 'Submission updated' from set of status messages
    $form['#submit'][] = '_remove_update_submission_msg';

  }
  // NEW MODE
  else {
     //Disable 'Ready to publish' field for not logged in users
     if (!user_is_logged_in()) {
         $is_published_field_ID = $settings['published_ID'];
         _set_webform_component($is_published_field_ID, $form,'#access',FALSE);
     } else {
       _webform_set_redirect_page($form,'[submission:url]');
     }

     //Set default value for 'Language' field
     global $language;
     if($language->language) {
       _set_webform_component($settings['language_ID'],$form,'#default_value',$language->language);
     }
  }
}


/**
 * Extra operation during the campaign submission presave (in DB):
 * - Create new user (submission owner) based on webform data
 *   (only for anonymous users - user not logged in)
 * - Send mails
 *   (only for logged in users)
 */
function webform_youmove_webform_submission_presave($node,&$submission) {
  $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);
  if ($node->nid != $ymw_ID) return;

  $settings = variable_get('webform_youmove__ymw_settings');

  if (user_is_logged_in()) {
    $submission_is_new = ($submission->sid) ? FALSE : TRUE;

    $submission_data = drupout_params($node, $submission);
    $submission_is_ready_to_publish = _webform_youmove_ready_to_publish($submission_data);
    $submission_become_ready_to_publish = FALSE;

    // Check previous value 'ready to publish' if not new submission
    if(!$submission_is_new) {
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $submission_prev_arr = webform_get_submissions(array('nid' => $submission->nid,'sid' => $submission->sid));
      $submission_prev = $submission_prev_arr[$submission->sid];

      $submission_data_prev = drupout_params($node, $submission_prev);
      $submission_is_ready_to_publish_prev = _webform_youmove_ready_to_publish($submission_data_prev);
      if(!$submission_is_ready_to_publish_prev && $submission_is_ready_to_publish){
        $submission_become_ready_to_publish = TRUE;
      }
    }

    // Send mail for new petition and not published
    if($submission_is_new && !$submission_is_ready_to_publish) {
       _mail('NEW_NOT_PUBLISHED_SUBMISSION',$node,$submission);
    }

    // Send mail for petition published
    if(($submission_is_new && $submission_is_ready_to_publish) ||
       (!$submission_is_new && $submission_become_ready_to_publish)) {
       _mail('PUBLISHED_SUBMISSION',$node,$submission);
    }

  } else {

    $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);
    $user = variable_get('webform_youmove_user_temp', NULL);

    if ($node->nid == $ymw_ID && !empty($user)) {
      try {
        // Create the user from webform submission (with roles)
        $role_name = variable_get('webform_youmove__ymw_user_role_name');
        $role = user_role_load_by_name($role_name);
        $rid = $role->rid;
        $mail_subject = t($settings['registration_mail_subject'],
                          array('[user:firstname]' => $user['firstname'], '[user:lastname]' => $user['lastname']));
        $mail_body = t($settings['registration_mail_body'],
                       array('[user:firstname]' => $user['firstname'], '[user:lastname]' => $user['lastname']));

        $account = _user_create($user['name'],
                                $user['mail'],
                                $user['password'],
                                array($rid =>$role_name),
                                $mail_subject,
                                $mail_body);
        variable_del('webform_youmove_user_temp');

        // Set permission to the webform submission
        $submission->uid = $account->uid;

      } catch(Exception $e) {
        drupal_set_message(t('Some errors occured, please contact us'), 'error');
        watchdog('webform_youmove::webform_youmove_webform_submission_presave()', $e->getMessage(), null, WATCHDOG_ERROR);
      }
    }
  }

}


function webform_youmove_webform_submission_update($node, $submission) {
}


/**
 * Extra operation during campaign submission render (display mode)
 * - Hide special fields according to the module settings
 * - Reordering 3 special elements
 */
function webform_youmove_webform_submission_render_alter(&$renderable){
  $settings = variable_get('webform_youmove__ymw_settings');

  //Reorder some elements
  $renderable['header']['#weight'] = 0;
  $renderable['header_for_not_published_submission']['#weight'] = 1;
  $renderable['add_an_image']['#weight'] = 2;

  //Hide fields according to the module settings
  $fields = explode(',', variable_get('webform_youmove__ymw_settings')['hidden_fields']);
  foreach($fields as $field) {
    _set_webform_component($field, $renderable, '#access', FALSE);
  }
}


/**
 * Translate a mail
 */
function webform_youmove_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);

  $subject = variable_get('user_mail_' . $key . '_subject', FALSE);
  $subject_t =  t($subject, array(), array('langcode' => $language->language));
  $message['subject'] .= token_replace($subject_t, $variables, array('language' => $language, 'callback' => 'user_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

  $mail_body = $params['pre_mail_body'];
  $mail_body_t = t($mail_body, array(), array('langcode' => $language->language));
  $message['body'][] = token_replace($mail_body_t, $variables , array('language' => $language, 'callback' => 'user_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));

}


/**
 * Redirection to the custom function for the campaign submission:
 * - view page
 * - edit page
 * - confirmation page (after new submission)
 */
function webform_youmove_menu_alter(&$items) {
  
  $items['node/%webform_menu/submission/%webform_menu_submission']['page callback'] = 'webform_youmove_webform_submission_view_page';
  $items['node/%webform_menu/submission/%webform_menu_submission/edit']['page callback'] = 'webform_youmove_webform_submission_edit_page';
  $items['node/%webform_menu/done']['access callback'] = 'webform_youmove_webform_confirmation_page_access';

}


/**
 * Customize the submission view page:
 * - Set the title according to the module settings
 * - Redirect to the Speakout campaign for published campaigns
 */
function webform_youmove_webform_submission_view_page($node, $submission, $format) {
  $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);
  if ($node->nid != $ymw_ID) return webform_submission_page($node, $submission, $format);
  
  $submission_data = drupout_params($node, $submission);
  $settings = variable_get('webform_youmove__ymw_settings');

  if (!_webform_youmove_ready_to_publish($submission_data)){
    $return_value = webform_submission_page($node, $submission, $format);

    if (isset($settings['title_ID'])) {
      $title_key = $settings['title_ID'];
      $submission_title = $submission_data[$title_key];

      $node_title_template = t($settings['submission_view_title']);
      $node_title = str_replace('[title]',$submission_title,$node_title_template);

      drupal_set_title($node_title);
    }
    return $return_value;
  }

  if(isset($submission_data['speakout_link'])) {drupal_goto($submission_data['speakout_link']);}

}


/**
 * Customize the submission edit page:
 * - Set the title according to the module settings
 */
function webform_youmove_webform_submission_edit_page($node, $submission, $format) {
  $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);
  if ($node->nid != $ymw_ID) return webform_submission_page($node, $submission, $format);
  
  $return_value = webform_submission_page($node, $submission, $format);

  $settings = variable_get('webform_youmove__ymw_settings');
  $submission_data = drupout_params($node, $submission);

  if (isset($settings['title_ID'])) {
      $title_key = $settings['title_ID'];
      $submission_title = $submission_data[$title_key];
      $node_title_template = t($settings['submission_edit_title']);
      $node_title = str_replace('[title]',$submission_title,$node_title_template);

      drupal_set_title($node_title);
  }

  return $return_value;
}


/**
 * Customize new submission confirmation page:
 * - (anonymous user) Set the submission token
 *   because normally webform submitted by anonymous user
 *   doesn't have the token and the text on confirmation page requires it
 */
function webform_youmove_webform_confirmation_page_access($node) {
   $ymw_ID = variable_get('webform_youmove__ymw_ID', NULL);
   if ($node->nid != $ymw_ID) return webform_confirmation_page_access($node);
  
   // Make sure SID is a positive integer.
   $sid = (!empty($_GET['sid']) && (int) $_GET['sid'] > 0) ? (int) $_GET['sid'] : NULL;

   if ($sid) {
     module_load_include('inc', 'webform', 'includes/webform.submissions');
     $submission = webform_get_submission($node->nid, $sid);

     if (!user_is_logged_in()) {
       $hash_query = !empty($_GET['token']) ? $_GET['token'] : NULL;
       $hash = webform_get_submission_access_token($submission);
       if ($hash_query === $hash) {
         return TRUE;
       }
     }
   }

   return webform_confirmation_page_access($node);
}


/**
 * Webform handler that redirect the submission form
 * if user is logged in
 * and the submission is not published
 * This validation is used only with new submission mode
 */
function _ymw_redirect_to_submission_view_page(&$form, &$form_state){
  if ($form['webform_completed'] && user_is_logged_in()) {
    $submission_data = drupout_params($form['#node'],$form['#submission']);

    if (!_webform_youmove_ready_to_publish($submission_data)) {
       _webform_set_redirect_page($form,'[submission:url]');
    }
  }
}


/**
 * Webform validation handler to validate against 2 user data controls
 */
function _ymw_user_data_validate(&$form, &$form_state) {
   //Get user data controls
   $node = $form['#node'];
   $settings = variable_get('webform_youmove__ymw_settings');
   $user_data__login__control_ID = $settings['login_fieldset_ID'];
   $user_data__contact__control_ID = $settings['contact_fieldset_ID'];
   $user_data__login__control_CID =_get_cid($user_data__login__control_ID,$node);
   $user_data__contact__control_CID =_get_cid($user_data__contact__control_ID,$node);
   $user_data__login__control_component = $node->webform['components'][$user_data__login__control_CID];
   $user_data__contact__control_component = $node->webform['components'][$user_data__contact__control_CID];

   // Get number of pages for this webform.
   if (isset($form_state['webform']['page_count'])) {
     $page_count = $form_state['webform']['page_count'];
   } elseif (isset($form_state['storage']['page_count'])) {
     $page_count = $form_state['storage']['page_count'];
   }

   //Check if user data component exists on current (multistep form) page
   $values = isset($form_state['values']['submitted']) ? $form_state['values']['submitted'] : NULL;
   $flat_values = _webform_client_form_submit_flatten($node,$values);

   if ($values && $page_count && $page_count > 1) {
      if(!array_key_exists($user_data__login__control_CID,$flat_values) &&
         !array_key_exists($user_data__contact__control_CID,$flat_values) ) {
         return;
      }
   }

   //Check which of 2 user data controls is shown
   if (defined('WebformConditionals::componentShown')) {
      $sorter = webform_get_conditional_sorter($node);
      if (!$sorter->isExecuted()) {
        $sorter->executeConditionals(array(), 0);
      }

      if($sorter->componentVisibility($user_data__contact__control_component['cid'],$user_data__contact__control_component['page_num']) == WebformConditionals::componentShown){

          //Get user contact controls
          $control_mail_ID = $settings['contact_mail_ID'];
          $control_passwd_ID = $settings['contact_passwd_ID'];
          $control_firstname_ID = $settings['contact_firstname_ID'];
          $control_lastname_ID = $settings['contact_lastname_ID'];

          $control_mail_CID = _get_cid($control_mail_ID,$node);
          $control_passwd_CID = _get_cid($control_passwd_ID,$node);
          $control_firstname_CID = _get_cid($control_firstname_ID,$node);
          $control_lastname_CID = _get_cid($control_lastname_ID,$node);

          $mail = $flat_values[$control_mail_CID];
          $passwd = $flat_values[$control_passwd_CID];
          $firstname = $flat_values[$control_firstname_CID];
          $lastname = $flat_values[$control_lastname_CID];

          //Check mail has proper format
          $regex = '/^[a-zA-Z0-9._\-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9._\-]+$/';
          if(!preg_match($regex,$mail)) {
              form_set_error('',t('Mail in wrong format.'));
          }

          //Check if the user mail already exists in system
          if(!empty($mail) && (user_load_by_mail($mail) || user_load_by_name($mail))) {form_set_error('',t('Contact name already exists.'));}

          //Set temp user variable
          variable_set('webform_youmove_user_temp',
                       array('name'=>$mail,
                             'firstname'=>$firstname,
                             'lastname'=>$lastname,
                             'mail'=>$mail,
                             'password'=>$passwd));

          _webform_set_redirect_page($form,'user');

      } elseif ($sorter->componentVisibility($user_data__login__control_component['cid'],$user_data__login__control_component['page_num']) == WebformConditionals::componentShown) {

          //Get user login controls
          $control_name_ID = $settings['login_name_ID'];
          $control_password_ID = $settings['login_password_ID'];
          $control_name_CID = _get_cid($control_name_ID,$node);
          $control_password_CID = _get_cid($control_password_ID,$node);

          //Login user
          $name = $flat_values[$control_name_CID];
          $password = $flat_values[$control_password_CID];

          if($name && $password && user_authenticate($name,$password)){
              $user_obj = user_load_by_name($name);
              $login_form = array();
              $login_form['uid'] = $user_obj->uid;
              user_login_submit(array(),$login_form);

              _webform_set_redirect_page($form,'[submission:url]');
          } else {
              form_set_error('', t('Sorry, unrecognized username or password.'));
          }
      }
   }
}


/**
 * - Create new user in the system
 *   based on name, mail address, role
 * - Send a mail to new created user
 *
 * Return: New user account
 */
function _user_create($name,$mail_to,$passwd,$roles,$mail_subject,$mail_body) {
  $account = NULL;

  if(!empty($name) && !empty($mail_to)) {
    //Get current language as default user language
    global $language;

    $fields = array(
      'name' => $name,
      'mail' => $mail_to,
      'pass' => $passwd,
      'language' => $language->language,
      'status' => 1,
      'init' => $mail_to,
      'roles' => $roles,
    );

    try {
      $account = user_save('', $fields);

      drupal_mail('webform_youmove',
                  'webform_youmove_register',
                  $mail_to,
                  $language,
                  array('account' => $account,
                        'pre_mail_body' => $mail_body,
                        'subject' => strip_tags($mail_subject)),
                  variable_get('site_mail', 'noreply@example.com'));

      return $account;

    } catch (Exception $e) {
      throw new Exception($e->getMessage());
    }

  } else {
      throw new Exception('Cannot create new user: user name or email empty.');
  }
}


/**
 * Set the attribute value in nested array
 *
 * Return: Nested array with changes
 */
function &_set_webform_component($key,&$values,$attribute_name,$attribute_value) {
  foreach($values as $key_value => &$value){
      if($key_value === $key) {
           if(is_array($values[$key_value][$attribute_name])) {
             if(is_array($attribute_value)) {
               $array1 = $values[$key_value][$attribute_name];
               $values[$key_value][$attribute_name] = array_merge($array1,$attribute_value);
             } else {
               $values[$key_value][$attribute_name][] = $attribute_value;
             }

           } else {
             $values[$key_value][$attribute_name] = $attribute_value;
           }
           return $values[$key_value];
      } elseif(is_array($value)) {
           $r = _set_webform_component($key,$value,$attribute_name,$attribute_value);
           if(isset($r)){return $r;}
      }
  }
  return NULL;
}

function _get_cid($key,$webform_node) {
  foreach ($webform_node->webform['components'] as $cid => $component) {
    if ($component['form_key'] == $key) {
      return $cid;
    }
  }
  return NULL;
}


/**
 * Get submission value based on its webform
 *
 * Return: Submission value
 */
function _get_value($key,$webform_node,$webform_submission) {

    $index_source_arr = $webform_node->webform['components'];
    $value_source_arr = $webform_submission->data;
    $field_key_index = NULL;

    foreach ($index_source_arr as $index => $index_value) {
      if($index_value['form_key'] == $key) {
          $field_key_index = $index;
          break;
      }
    }
    foreach ($value_source_arr as $index => $values) {
      if($index == $field_key_index) {
        return (isset($values[0])) ? $values[0] : NULL;
      }
    }

    return NULL;
}


/**
 * Set submission value based on its webform
 */
function _set_value($key,$value,$webform_node,$webform_submission) {

    $index_source_arr = $webform_node->webform['components'];
    $value_source_arr = $webform_submission->data;
    $field_key_index = NULL;

    foreach ($index_source_arr as $index => $index_value) {
      if($index_value['form_key'] == $key) {
          $field_key_index = $index;
          break;
      }
    }
    foreach ($value_source_arr as $index => $values) {
      if(($index == $field_key_index) && isset($values[0])) {
         $webform_submission->data[$index][0] = $value;
         webform_submission_update($webform_node, $webform_submission);
      }
    }

    return NULL;
}




/**
 * Function for access primary tabs link: 'Publish'
 * Check if givent submission is already published
 * if so: 'Publish' link id hidden
 *
 * Return: True/False
 */
function _submission_publish_func_access($type,$node,$submission) {

    $submission_data = drupout_params($node,$submission);
    return !_webform_youmove_ready_to_publish($submission_data);
}


/**
 * Callback of primary tabs link: 'Publish'
 * - set the 'ready to publish' submission field to true
 * - generate speakout link if empty
 * - send mail
 * - redirect to speakout page
 */
function _submission_publish_func_callback($type,$node,$submission) {
    $submission_data = drupout_params($node,$submission);

    $settings = variable_get('webform_youmove__ymw_settings');
    $title_ID = $settings['title_ID'];
    $is_published_field_ID = $settings['published_ID'];
    $is_published_field_positive_value = $settings['published_positive_value'];
    $speakout_link_ID = $settings['speakout_link_ID'];
    $link = $submission_data[$speakout_link_ID];

    if (empty($link)) {
       $title = $submission_data[$title_ID];
       $link = _drupout_speakout_link($title);
       _set_value($speakout_link_ID,$link,$node,$submission);
    }

    _set_value($is_published_field_ID,$is_published_field_positive_value,$node,$submission);
    _mail('PUBLISHED_SUBMISSION',$node,$submission);
    drupal_goto($link);

    return '';
}


/**
 * Callback of the webform 'Cancel' button
 * - redirection to the user's dashboard  page
 */
function _webform_youmove_form_cancel($form, &$form_state) {
  $url = variable_get('webform_youmove__ymw_user_dashboard_url');
  drupal_goto($url);
}

function _webform_youmove_ready_to_publish($data) {
  $settings = variable_get('webform_youmove__ymw_settings');

  if($settings) {
      $is_published_field_ID = $settings['published_ID'];
      $is_published_field_positive_value = $settings['published_positive_value'];
      return ($data[$is_published_field_ID] == $is_published_field_positive_value);
  }

  return FALSE;

}

function _webform_set_redirect_page($form,$redirect_url) {
  $form['#node']->webform['redirect_url'] = $redirect_url;
}


/**
 * Remove status messages: 'Submission updated.'
 * from messages set by
 * 'drupal_set_messages' function
 */
function _remove_update_submission_msg($form, &$form_state) {
   $status_msgs = drupal_get_messages('status');
   foreach($status_msgs['status'] as $msg) {
      if($msg != t('Submission updated.')) {
          drupal_set_message($msg,'status');
      }
   }
}


/**
 * Send mail due to key
 * - (key)'published_submission': mail after published campaign(submission)
 * - (key)'new_not_published_submission': mail after new, not published campaign(submission)
 */
function _mail($key,$node,$submission) {
  global $user;
  global $language;

  if($user && $language && $key) {
    $mail_to = $user->mail;
    $settings = variable_get('webform_youmove__ymw_settings');

    $user_civicrm = _civicrm_user_profile_get_contact($user->uid);
    $user_civicrm_firstname = ($user_civicrm && array_key_exists('first_name',$user_civicrm)) ? $user_civicrm['first_name'] : '';
    $user_civicrm_lastname = ($user_civicrm && array_key_exists('last_name',$user_civicrm)) ? $user_civicrm['last_name'] : '';


    switch ($key) {
      case 'PUBLISHED_SUBMISSION':
        $submission_data = drupout_params($node,$submission);
        $title_ID = $settings['title_ID'];
        $speakout_link_ID = $settings['speakout_link_ID'];
        $link = $submission_data[$speakout_link_ID];

        if (empty($link)) {
          $title = $submission_data[$title_ID];
          $link = _drupout_speakout_link($title);
        }

        $mail_body = t($settings['submission_published_mail_body'],
                       array('[link:petition]' => $link, 
                             '[user:firstname]' => $user_civicrm_firstname,
                             '[user:lastname]' => $user_civicrm_lastname));
        $mail_subject = t($settings['submission_published_mail_subject'],
                          array('[user:firstname]' => $user_civicrm_firstname,
                                '[user:lastname]' => $user_civicrm_lastname));

        break;
      case 'NEW_NOT_PUBLISHED_SUBMISSION':
        $link = url(variable_get('webform_youmove__ymw_user_dashboard_url'), array('absolute' => TRUE, 'language' => $language));
        $mail_body = t($settings['new_submission_not_published_mail_body'],
                       array('[link:dashboard]' => $link,
                             '[user:firstname]' => $user_civicrm_firstname,
                             '[user:lastname]' => $user_civicrm_lastname));
        $mail_subject = t($settings['new_submission_not_published_mail_subject'],
                          array('[user:firstname]' => $user_civicrm_firstname,
                                '[user:lastname]' => $user_civicrm_lastname));
        break;
    }

    drupal_mail(
      'webform_youmove',
      'webform_youmove_campaign',
      $mail_to,
      $language,
      array('pre_mail_body' => $mail_body,
            'subject' => strip_tags($mail_subject)),
      variable_get('site_mail', 'noreply@example.com'));

  }
}


/**
 * Retrieves a CiviCRM contact by Drupal user ID.
 */
function _civicrm_user_profile_get_contact($uid) {
  $contacts = &drupal_static(__FUNCTION__);
  if (isset($contacts[$uid])) {
    return $contacts[$uid];
  }
  if (!isset($contacts)) {
    $contacts = array();
  }
  $contacts[$uid] = FALSE;
  civicrm_initialize();
  require_once 'api/api.php';
  $res = civicrm_api('uf_match', 'get', array('uf_id' => $uid, 'version' => 3));
  if ($res['is_error'] || empty($res['id']) || empty($res['values'][$res['id']])) {
    return FALSE;
  }
  $id = $res['values'][$res['id']]['contact_id'];
  $res = civicrm_api('contact', 'get', array('contact_id' => $id, 'version' => 3));
  if ($res['is_error']) {
    return FALSE;
  }
  $contacts[$uid] = $res['values'][$res['id']];
  return $contacts[$uid];
}
